---
description: DH-C Standard Documentation Convention
globs:
alwaysApply: false
---
# Documentation comment styles

1. use the '@' symbol for @brief, @details, etc.
2. Use a concise style, as if you were writing a commit message.
  - It should be easy to read and clear so that comments are not misleading.
3. Include brief sample code examples in all documentation comments, if possible.
4. Include caveats and assert conditions.
5. list relevant headers, functions, etc.

## Common

All agent functions should include:

1. @brief - Short description of the agent's core functionality
2. @param - Description of each parameter's purpose
3. @return - Description of return value (if applicable)
4. @example - Simple example of how to call the agent
5. @dependencies - List of external libraries or services the agent depends on
6. @limitations - Known limitations or caveats

- Should include usage examples in the comments for each function.
- Macro functions should have a `/** ... */` style comments inside the definition.

### Default

follow doxygen style of `/// ... ` style of doxygen for common codes.

```c
/// @brief Agent that searches for specific patterns in a given codebase
/// @param query The pattern or keyword to search for
/// @param context Optional file path to limit the search scope
/// @return List of found patterns and their locations
/// @example
///   const results = searchAgent("function main", "./src");
/// @dependencies fs, path, glob
/// @limitations May be slow on large codebases
extern fn_(searchAgent(Query euery, Context context), Sli$Pattern);
```

### Only Macros

Macros that extend comp_* are considered macro callers. Macro callers follow the doxygen style of `/** ... */` style of doxygen. Do not write above the line '#define', but above the syntax where comp_* is called inside the definition.

```c
#define searchAgent()                                                   \
/**                                                                     \
 * @brief Agent that searches for specific patterns in a given codebase \
 * @param query The pattern or keyword to search for                    \
 * @param context Optional file path to limit the search scope          \
 * @return List of found patterns and their locations                   \
 * @example                                                             \
 *   const results = searchAgent("function main", "./src");             \
 * @dependencies fs, path, glob                                         \
 * @limitations May be slow on large codebases                          \
 */                                                                     \
 comp_op__searchAgent(query, context)
```
